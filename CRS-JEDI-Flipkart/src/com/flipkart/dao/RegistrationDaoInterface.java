/**
 * 
 */
package com.flipkart.dao;

import java.sql.SQLException;
import java.util.List;

import com.flipkart.bean.Course;
import com.flipkart.bean.Notification;
import com.flipkart.bean.StudentGrade;
import com.flipkart.constant.ModeOfPayment;
import com.flipkart.exception.CourseLimitExceedException;
import com.flipkart.exception.CourseNotFoundException;
import com.flipkart.exception.SeatNotAvailableException;

/**
 * @author JDI-03
 * Interface for Registration DAO Operation
 *
 */
public interface RegistrationDaoInterface {
	
	/**
	 * Method to add course in database
	 * @param courseCode
	 * @param studentId
	 * @return
	 * @throws CourseNotFoundException
	 * @throws SQLException 
	 */
	public boolean addCourse(String courseCode, int studentId) throws CourseNotFoundException, CourseLimitExceedException, SeatNotAvailableException, SQLException;
	/**
	 * Drop Course selected by student
	 * @param courseCode
	 * @param studentId
	 * @return
	 * @throws CourseNotFoundException 
	 * @throws SQLException 
	 */
	public boolean dropCourse(String courseCode, int studentId) throws CourseNotFoundException, SQLException;
	/**
	 * Method to get the list of courses available from course catalog 
	 * @param studentId
	 * @return
	 * @throws SQLException 
	 */
	public List<Course> viewCourses(int studentId) throws SQLException;
	/**
	 * 
	 * @param studentId
	 * @return
	 * @throws SQLException 
	 */
	public List<Course> viewRegisteredCourses(int studentId) throws SQLException;
	/**
	 * Method to view grade card of the student
	 * @param studentId
	 * @return
	 * @throws SQLException 
	 */
	public List<StudentGrade> viewGradeCard(int studentId) throws SQLException;
	/**
	 * Method to retrieve fee for the selected courses from the database and calculate total fee
	 * @param studentId
	 * @return
	 * @throws SQLException 
	 */
	public double calculateFee(int studentId) throws SQLException;
	/**
	 * Check if seat is available for that particular course
	 * @param courseCode
	 * @return
	 * @throws SQLException 
	 */
	public boolean seatAvailable(String courseCode) throws SQLException;
	
	/**Method to get the list of courses registered by the student
	 * Number of registered courses for a student
	 * @param studentId
	 * @return
	 * @throws SQLException 
	 */
	public int numOfRegisteredCourses(int studentId) throws SQLException;
	
	/**
	 *  Method for fee payment and send notification to client. The transaction id for the session is generated by UUID.
	 * @param studentId
	 * @param mode
	 * @param amount
	 * @return 
	 * @throws SQLException 
	 */
	public Notification payFee(int studentId, ModeOfPayment mode, double amount) throws SQLException;
	/**
	 * Method checks if the student is registered for that course
	 * @param courseCode
	 * @param studentId
	 * @return
	 * @throws SQLException 
	 */
	public boolean isRegistered(String courseCode, int studentId) throws SQLException;
	/**
	 * 
	 * @param studentId
	 * @return
	 * @throws SQLException
	 */
	public boolean getRegistrationStatus(int studentId) throws SQLException;
	/**
	 * 
	 * @param studentId
	 * @throws SQLException
	 */
	public void setRegistrationStatus(int studentId) throws SQLException;
	
	
}
